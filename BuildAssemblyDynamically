using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.AspNetCore.Mvc;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Newtonsoft.Json;

namespace DynamicClassGenerator.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class DynamicClassController : ControllerBase
    {
        [HttpPost]
        public IActionResult GenerateDynamicClass([FromBody] DynamicClassRequest request)
        {
            if (request == null || request.ClassConfigurations == null || request.ClassConfigurations.Count == 0)
                return BadRequest("Invalid request.");

            string assemblyName = request.AssemblyName;
            string version = request.Version;

            var assemblies = new List<Assembly>();
            foreach (var config in request.ClassConfigurations)
            {
                if (!ValidatePropertyTypes(config.Properties))
                    return BadRequest($"Invalid property types for class {config.ClassName}.");

                string code = GenerateClassCode(config.ClassName, config.Properties);

                var assembly = CompileCode(code, assemblyName, version);
                if (assembly == null)
                    return BadRequest($"Failed to compile dynamic class {config.ClassName}.");

                assemblies.Add(assembly);
            }

            var mergedAssembly = MergeAssemblies(assemblies);
            if (mergedAssembly == null)
                return BadRequest("Failed to merge assemblies.");

            var memoryStream = new MemoryStream();
            mergedAssembly.Write(memoryStream);

            memoryStream.Seek(0, SeekOrigin.Begin);
            return File(memoryStream, "application/octet-stream", $"{assemblyName}_{version}.dll");
        }

        private bool ValidatePropertyTypes(List<PropertyDefinition> properties)
        {
            foreach (var prop in properties)
            {
                if (!IsValidPropertyType(prop.PropertyType))
                    return false;
            }
            return true;
        }

        private bool IsValidPropertyType(string type)
        {
            var validTypes = new[] { "int", "string", "double", "float", "bool", "DateTime" };
            return validTypes.Contains(type);
        }

        private string GenerateClassCode(string className, List<PropertyDefinition> properties)
        {
            string classCode = $"using System;\nusing Newtonsoft.Json;\n\n";
            classCode += $"public class {className} {{\n";

            foreach (var prop in properties)
            {
                classCode += $"    [JsonPropertyName(\"{prop.JsonPropertyName}\")] public {prop.PropertyType} {prop.PropertyName} {{ get; set; }}\n";
            }

            classCode += "}\n";
            return classCode;
        }

        private Assembly CompileCode(string code, string assemblyName, string version)
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(code);

            var compilation = CSharpCompilation.Create(
                assemblyName,
                syntaxTrees: new[] { syntaxTree },
                references: GetDefaultReferences(),
                options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary)
                    .WithAssemblyIdentityComparer(DesktopAssemblyIdentityComparer.Default)
                    .WithDeterministic(true));

            using (var ms = new MemoryStream())
            {
                EmitResult result = compilation.Emit(ms);

                if (!result.Success)
                {
                    return null;
                }

                ms.Seek(0, SeekOrigin.Begin);
                return Assembly.Load(ms.ToArray());
            }
        }

        private List<MetadataReference> GetDefaultReferences()
        {
            var references = new List<MetadataReference>();
            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                if (!assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
                {
                    references.Add(MetadataReference.CreateFromFile(assembly.Location));
                }
            }
            return references;
        }

        private Assembly MergeAssemblies(List<Assembly> assemblies)
        {
            var mergedAssembly = AssemblyBuilder.DefineDynamicAssembly(
                new AssemblyName("MergedAssembly"), AssemblyBuilderAccess.RunAndCollect);

            foreach (var assembly in assemblies)
            {
                foreach (var module in assembly.GetModules())
                {
                    var moduleBuilder = mergedAssembly.DefineDynamicModule(module.Name);
                    foreach (var type in module.GetTypes())
                    {
                        moduleBuilder.DefineType(type.FullName, type.Attributes);
                    }
                }
            }

            return mergedAssembly;
        }
    }

    public class DynamicClassRequest
    {
        public string AssemblyName { get; set; }
        public string Version { get; set; }
        public List<ClassConfiguration> ClassConfigurations { get; set; }
    }

    public class ClassConfiguration
    {
        public string ClassName { get; set; }
        public List<PropertyDefinition> Properties { get; set; }
    }

    public class PropertyDefinition
    {
        public string PropertyName { get; set; }
        public string PropertyType { get; set; }
        public string JsonPropertyName { get; set; }
    }
}
