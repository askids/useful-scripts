using System;
using System.Text.Json;
using System.Text.Json.Serialization;

public class MicrosoftDateFormatWithESTConverter : JsonConverter<DateTime?>
{
    private readonly TimeZoneInfo _sourceTimeZone;

    public MicrosoftDateFormatWithESTConverter(TimeZoneInfo sourceTimeZone)
    {
        _sourceTimeZone = sourceTimeZone;
    }

    public override DateTime? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        // Handle deserialization if needed (not implemented here)
        throw new NotImplementedException();
    }

    public override void Write(Utf8JsonWriter writer, DateTime? value, JsonSerializerOptions options)
    {
        if (value.HasValue)
        {
            DateTime dateTimeToConvert = value.Value;

            // If the DateTime.Kind is Unspecified, treat it as UTC
            if (dateTimeToConvert.Kind == DateTimeKind.Unspecified)
            {
                // If the source time zone is UTC, treat it as UTC directly
                if (_sourceTimeZone == TimeZoneInfo.Utc)
                {
                    dateTimeToConvert = DateTime.SpecifyKind(dateTimeToConvert, DateTimeKind.Utc);
                }
                else
                {
                    // Convert the Unspecified DateTime to UTC from the source time zone
                    dateTimeToConvert = TimeZoneInfo.ConvertTimeToUtc(dateTimeToConvert, _sourceTimeZone);
                }
            }
            else if (dateTimeToConvert.Kind == DateTimeKind.Local)
            {
                // Local is treated as the system's local time zone, so convert it to UTC
                dateTimeToConvert = dateTimeToConvert.ToUniversalTime();
            }

            // Convert the UTC DateTime to Eastern Standard Time (EST/EDT)
            TimeZoneInfo estZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
            var estDateTime = TimeZoneInfo.ConvertTimeFromUtc(dateTimeToConvert, estZone);

            // Calculate Unix time milliseconds
            long unixTimeMilliseconds = new DateTimeOffset(estDateTime).ToUnixTimeMilliseconds();

            // Serialize in Microsoft Date format: \/Date(ticks)\/
            string microsoftDateFormat = $"\\/Date({unixTimeMilliseconds})\\/";
            writer.WriteStringValue(microsoftDateFormat);
        }
        else
        {
            // Write a JSON null value if the DateTime is null
            writer.WriteNullValue();
        }
    }
}

class Program
{
    static void Main()
    {
        var utcTimeZone = TimeZoneInfo.Utc; // Using UTC time zone for source data
        var options = new JsonSerializerOptions
        {
            Converters = { new MicrosoftDateFormatWithESTConverter(utcTimeZone) } // UTC Time zone for source data
        };

        // Test with a DateTime value that is Unspecified (should treat as UTC)
        DateTime unspecifiedTime = new DateTime(2024, 10, 12, 12, 0, 0, DateTimeKind.Unspecified); // Example value
        string json = JsonSerializer.Serialize(unspecifiedTime, options);
        Console.WriteLine("Serialized DateTime (Unspecified as UTC): " + json);

        // Test with a UTC DateTime
        DateTime utcTime = DateTime.UtcNow; // Assume this is in UTC
        json = JsonSerializer.Serialize(utcTime, options);
        Console.WriteLine("Serialized DateTime (UTC): " + json);

        // Test with null DateTime?
        DateTime? nullableDateTime = null;
        json = JsonSerializer.Serialize(nullableDateTime, options);
        Console.WriteLine("Serialized null DateTime?: " + json);
    }
}
