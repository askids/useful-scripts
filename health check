{
  "ApiHealthCheckUrls": [
    "https://api1.example.com/health",
    "https://api2.example.com/health",
    "https://api3.example.com/health",
    "https://api4.example.com/health",
    ...
    "https://api60.example.com/health"
  ]
}

Program.cs

using Microsoft.Extensions.Diagnostics.HealthChecks;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using HealthChecks.UI.Client;
using Microsoft.Extensions.Configuration;
using System.Net.Http;
using Newtonsoft.Json.Linq;

var builder = WebApplication.CreateBuilder(args);

// Read the API health check URLs from the appsettings.json
var apiUrls = builder.Configuration.GetSection("ApiHealthCheckUrls").Get<List<string>>();

// Register HttpClient
builder.Services.AddHttpClient();

// Register a custom health check for each API URL
foreach (var url in apiUrls)
{
    builder.Services.AddHealthChecks()
        .AddCheck<CustomApiHealthCheck>($"API Health Check for {url}",
            sp => new CustomApiHealthCheck(sp.GetRequiredService<HttpClient>(), url));
}

// Add HealthCheck UI configuration with in-memory storage (default)
builder.Services.AddHealthChecksUI(setup =>
{
    setup.SetEvaluationTimeInSeconds(10); // Health check evaluation interval (in seconds)
    setup.SetMinimumSecondsBetweenFailureNotifications(60); // Interval between failure notifications
    setup.AddHealthCheckEndpoint("External API Health", "/health");
}).AddInMemoryStorage(); // This uses the default in-memory storage

var app = builder.Build();

// Configure the HTTP request pipeline
app.UseRouting();

app.UseEndpoints(endpoints =>
{
    // Expose the health check endpoint
    endpoints.MapHealthChecks("/health", new HealthCheckOptions
    {
        Predicate = _ => true, // Include all registered health checks
        ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
    });

    // Expose the HealthCheck UI endpoint
    endpoints.MapHealthChecksUI("/health-ui"); // The HealthCheck UI
});

app.Run();

// Custom health check class for external API health checks
public class CustomApiHealthCheck : IHealthCheck
{
    private readonly HttpClient _httpClient;
    private readonly string _url;

    public CustomApiHealthCheck(HttpClient httpClient, string url)
    {
        _httpClient = httpClient;
        _url = url;
    }

    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken)
    {
        try
        {
            // Perform the HTTP request to the API's health check endpoint
            var response = await _httpClient.GetAsync(_url, cancellationToken);
            if (!response.IsSuccessStatusCode)
            {
                return HealthCheckResult.Unhealthy($"API responded with status code {response.StatusCode}");
            }

            // Parse the response body
            var responseBody = await response.Content.ReadAsStringAsync();
            var jsonResponse = JObject.Parse(responseBody);

            // Check if the response contains the expected "message" field with value "Healthy"
            if (jsonResponse["message"]?.ToString() == "Healthy")
            {
                return HealthCheckResult.Healthy();
            }

            return HealthCheckResult.Unhealthy("API health check returned an unexpected message.");
        }
        catch (Exception ex)
        {
            return HealthCheckResult.Unhealthy($"Exception occurred: {ex.Message}");
        }
    }
}

