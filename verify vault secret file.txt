# Sample JSON files:
# 
# sharedappsettings.json (contains Vault URL and role ID):
# {
#     "VaultSecretsUrl": "https://vault.example.com",
#     "roleId": "your-role-id"
# }
#
# vaultsecretsettings.Default.json (contains Vault secret ID):
# {
#     "VaultSecretId": "your-secret-id"
# }
#
# The script will:
# 1. Load configuration from sharedappsettings.json and vaultsecretsettings.Default.json in the same directory as the script.
# 2. Authenticate to HashiCorp Vault using the AppRole authentication method.
# 3. If authentication is successful, retrieve the TTL of the secret ID.
# 4. Calculate the approximate creation date based on an assumed initial TTL of 180 days.
# 5. Update vaultsecretsettings.Default.json to include a new "CreatedDate" field with the calculated creation date.
# 6. Return a success code (0) if everything runs correctly, or a failure code if there is an issue.

# Get the directory of the script being executed
$scriptDirectory = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition

# Paths to the JSON files relative to the script's location
$sharedAppSettingsPath = Join-Path -Path $scriptDirectory -ChildPath "sharedappsettings.json"
$vaultSecretSettingsPath = Join-Path -Path $scriptDirectory -ChildPath "vaultsecretsettings.Default.json"

# Check if the JSON files exist
if (!(Test-Path -Path $sharedAppSettingsPath) -or !(Test-Path -Path $vaultSecretSettingsPath)) {
    Write-Output "Error: Configuration or secret file not found."
    exit 1
}

# Load and parse the JSON files
$config = Get-Content -Path $sharedAppSettingsPath -Encoding UTF8 | ConvertFrom-Json
$vaultSecret = Get-Content -Path $vaultSecretSettingsPath -Encoding UTF8 | ConvertFrom-Json

# Extract values from JSON
$vaultSecretsUrl = $config.VaultSecretsUrl
$roleId = $config.roleId
$vaultSecretId = $vaultSecret.VaultSecretId

# Vault AppRole login endpoint
$vaultAuthEndpoint = "$vaultSecretsUrl/v1/auth/approle/login"
$vaultSecretIdLookupEndpoint = "$vaultSecretsUrl/v1/auth/approle/role/<role_name>/secret-id/lookup"  # Replace <role_name> with actual role name

# Prepare the request body with the role ID and secret ID
$authRequestBody = @{
    role_id = $roleId
    secret_id = $vaultSecretId
} | ConvertTo-Json

try {
    # Step 1: Authenticate to Vault using AppRole and Secret ID to get a token
    $authResponse = Invoke-RestMethod -Uri $vaultAuthEndpoint -Method Post -Body $authRequestBody -ContentType "application/json"
    $vaultToken = $authResponse.auth.client_token

    # Step 2: Check if the Vault token was retrieved successfully
    if ($vaultToken) {
        Write-Output "The secret ID is active. Vault token has been generated successfully."

        # Step 3: Retrieve TTL of the secret ID
        $headers = @{ "X-Vault-Token" = $vaultToken }
        $lookupRequestBody = @{
            secret_id = $vaultSecretId
        } | ConvertTo-Json

        $lookupResponse = Invoke-RestMethod -Uri $vaultSecretIdLookupEndpoint -Method Post -Headers $headers -Body $lookupRequestBody -ContentType "application/json"
        $remainingTTLInSeconds = $lookupResponse.data.ttl

        # Step 4: Calculate the approximate creation date
        $initialTTLInDays = 180  # Assumed initial TTL in days for new secret IDs
        $remainingTTLInDays = [math]::Round($remainingTTLInSeconds / (24 * 60 * 60), 2)
        $daysSinceCreation = $initialTTLInDays - $remainingTTLInDays
        $approximateCreationDate = (Get-Date).AddDays(-$daysSinceCreation).ToString("yyyy-MM-dd")

        # Step 5: Update the secret JSON with the calculated creation date
        $vaultSecret.CreatedDate = $approximateCreationDate
        $vaultSecret | ConvertTo-Json | Out-File -FilePath $vaultSecretSettingsPath -Encoding UTF8

        Write-Output "Secret ID creation date has been added to the secret file: $approximateCreationDate"
        exit 0  # Success code
    } else {
        Write-Output "Failed to retrieve Vault token. The secret ID might not be active."
        exit 2  # Failure code if token retrieval fails
    }
} catch {
    Write-Output "Error: Unable to authenticate with Vault. The secret ID may not be active, or there is an issue with the connection."
    Write-Output $_.Exception.Message
    exit 3  # Failure code for connection or authentication errors
}
